{"version":3,"sources":["componets/Profile/ProfileInfo/ProfileInfo.module.css","componets/Profile/MyPost/MyPosts.module.css","componets/Profile/MyPost/Post/Post.module.css","componets/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","componets/Profile/ProfileInfo/ProfileDataForm.jsx","componets/Profile/ProfileInfo/ProfileInfo.jsx","componets/Profile/MyPost/Post/Post.jsx","componets/Profile/MyPost/MyPosts.jsx","componets/Profile/MyPost/MyPostsContainer.jsx","componets/Profile/Profile.jsx","componets/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Post","item","massage","likeCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postElements","posts","reverse","p","likesCount","id","postBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,+B,oBCAhID,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,yB,oBCAjED,EAAOC,QAAU,CAAC,KAAO,qB,4IC0CVC,EAxCgB,SAACC,GAAW,IAAD,EAELC,oBAAS,GAFJ,mBAE9BC,EAF8B,KAEpBC,EAFoB,OAGTF,mBAASD,EAAMI,QAHN,mBAG9BA,EAH8B,KAGtBC,EAHsB,KAKnCC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeT,OACI,iCACOF,GACC,gCACG,uCADH,KACkB,uBAAMK,cAjBZ,WACrBJ,GAAY,IAgBe,cAA2CH,EAAMI,QAAU,aAG/EF,GACE,8BACI,uBAAOM,SAbL,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYwBC,WAAW,EACrCC,OAnBC,WACxBV,GAAY,GACZH,EAAMc,aAAaV,IAkBIO,MAASP,U,2CCQzBW,EAHkBC,YAAU,CAAEC,KAAM,gBAAlBD,EAlCT,SAAC,GAAmC,IAAlCE,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,MAC7C,OAAO,uBAAMC,SAAUH,EAAhB,UACH,8BAAK,4CACJE,GAAS,qBAAKE,UAAWC,IAAMC,iBAAtB,SACLJ,IAGL,gCACI,0CADJ,KACuBK,YAAY,YAAa,WAAY,GAAIC,QAGhE,gCACI,kDADJ,IAC8BD,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAACC,KAAM,gBAGlF,gCACI,uDADJ,IAEMF,YAAY,yBAA0B,4BAA6B,GAAIG,QAG7E,gCACI,yCADJ,IAEKH,YAAY,WAAY,UAAW,GAAIG,QAE5C,gCACI,yCADJ,KACsBC,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAAC,GACpD,OAAQ,qBAAeX,UAAWY,IAAEC,QAA5B,SACJ,8BAAIF,EAAJ,KAAWR,YAAYQ,EAAK,YAAcA,EAAK,GAAIP,SADrCO,eCcxBG,EAAc,SAAC,GAAqC,IAApCjB,EAAmC,EAAnCA,QAASkB,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,aACrC,OAAO,gCACFD,GAAW,8BAAK,wBAAQE,QAASD,EAAjB,oBAChB,gCACI,0CADJ,KACuBnB,EAAQqB,YAE/B,gCACI,kDADJ,KAC+BrB,EAAQsB,eAAiB,MAAQ,QAE/DtB,EAAQsB,gBACT,gCACI,uDADJ,KACoCtB,EAAQuB,6BAG5C,gCACI,yCADJ,KACsBvB,EAAQwB,WAE9B,gCACI,yCADJ,KACsBd,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAAC,GACpD,OAAQ,cAAC,EAAD,CAAmBW,aAAcX,EAAKY,aAAc1B,EAAQY,SAASE,IAAvDA,aAQ5Ba,EAAU,SAAC,GAAiC,IAAhCF,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,aACxB,OAAO,sBAAKvB,UAAWY,IAAEC,QAAlB,UAA2B,4BAAIS,IAA/B,KAAmDC,MAInDE,EAvEK,SAAC,GAAsE,IAArE5B,EAAoE,EAApEA,QAASf,EAA2D,EAA3DA,OAAQU,EAAmD,EAAnDA,aAAcuB,EAAqC,EAArCA,QAASW,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YAAiB,EAExDhD,oBAAS,GAF+C,mBAEjFC,EAFiF,KAEvEC,EAFuE,KAItF,IAAKgB,EACD,OAAO,cAAC+B,EAAA,EAAD,IAiBX,OACI,8BACI,sBAAK5B,UAAWY,IAAEiB,iBAAlB,UACI,qBAAKC,IAAKjC,EAAQkC,OAAOC,OAASC,IAAWjC,UAAWY,IAAEsB,YACzDnB,GAAW,uBAAOV,KAAM,OAAQnB,SAlBjB,SAACC,GACrBA,EAAEgD,OAAOC,MAAMC,QACfX,EAAUvC,EAAEgD,OAAOC,MAAM,OAmBnBxD,EACI,cAAC,EAAD,CAAiB0D,cAAezC,EAASA,QAASA,EAASE,SAhB5D,SAACwC,GACdZ,EAAYY,GAAUC,MAClB,WACI3D,GAAY,SAcN,cAAC,EAAD,CAAamC,aAAc,WAAMnC,GAAY,IAAQgB,QAASA,EAASkB,QAASA,IAEtF,cAAC,EAAD,CAAwBjC,OAAQA,EAAQU,aAAcA,U,oDCzBvDiD,EAbF,SAAC/D,GAEV,OACI,sBAAKsB,UAAWY,IAAE8B,KAAlB,UACI,qBACIZ,IAAI,wGACPpD,EAAMiE,QACP,wCAAWjE,EAAMkE,iB,gBCFvBC,EAAgBC,YAAiB,IAgBnCC,EAAsBrD,YAAU,CAACC,KAAM,yBAAjBD,EAdL,SAAChB,GAClB,OACA,uBAAMqB,SAAUrB,EAAMkB,aAAtB,UACI,8BACI,cAACoD,EAAA,EAAD,CAAOC,KAAM,cAAcC,UAAW5C,IAAW6C,YAAa,eACvDC,SAAU,CAACC,IAAUR,OAEhC,8BACI,sDAkCGS,EA1BCC,IAAMC,MAAK,SAAA9E,GACvB,IAAI+E,EACA,YAAI/E,EAAMgF,OACLC,UACAjD,KAAI,SAAAkD,GAAC,OAAI,cAAC,EAAD,CAAiBjB,QAASiB,EAAEjB,QAASkB,WAAYD,EAAEC,YAAxCD,EAAEE,OAU/B,OACI,sBAAK9D,UAAWY,IAAEmD,UAAlB,UACI,yCACA,cAAChB,EAAD,CAAqBhD,SAPb,SAACiE,GACbtF,EAAMuF,QAAQD,EAAOE,gBAOjB,qBAAKlE,UAAWY,IAAE8C,MAAlB,SACKD,U,QCtBFU,EAFUC,aAdD,SAACC,GACjB,MAAM,CACFX,MAAOW,EAAMC,YAAYZ,MACzBQ,YAAaG,EAAMC,YAAYJ,gBAGhB,SAACK,GACpB,MAAM,CACFN,QAAS,SAACC,GACNK,EAASC,YAAqBN,QAKrBE,CAA6Cd,GCHvDmB,EAdC,SAAC/F,GACb,OACI,gCACK,cAAC,EAAD,CAAagD,UAAWhD,EAAMgD,UACjBX,QAASrC,EAAMqC,QACflB,QAAWnB,EAAMmB,QACjBf,OAAQJ,EAAMI,OACd6C,YAAajD,EAAMiD,YACnBnC,aAAcd,EAAMc,eACjC,cAAC,EAAD,Q,gBCJPkF,E,+KAGE,IAAIC,EAASC,KAAKlG,MAAMmG,MAAMC,OAAOH,OAChCA,IAEDA,EAASC,KAAKlG,MAAMqG,mBAEhBH,KAAKlG,MAAMsG,QAAQC,KAAK,UAGhCL,KAAKlG,MAAMwG,eAAeP,GAC1BC,KAAKlG,MAAMyG,UAAUR,K,0CAIrBC,KAAKQ,mB,yCAGcC,EAAWC,EAAWC,GACjCX,KAAKlG,MAAMmG,MAAMC,OAAOH,QAAUU,EAAUR,MAAMC,OAAOH,QACzDC,KAAKQ,mB,+BAKb,OACI,cAAC,EAAD,2BAAaR,KAAKlG,OAAlB,IACQqC,SAAU6D,KAAKlG,MAAMmG,MAAMC,OAAOH,OACjC9E,QAAS+E,KAAKlG,MAAMmB,QACpBf,OAAQ8F,KAAKlG,MAAMI,OACnBU,aAAcoF,KAAKlG,MAAMc,aACzBkC,UAAWkD,KAAKlG,MAAMgD,iB,GAhCZ6B,IAAMiC,WA4CtBC,sBACXrB,aARkB,SAACC,GAAD,MAAY,CAC9BxE,QAASwE,EAAMC,YAAYzE,QAC3Bf,OAAQuF,EAAMC,YAAYxF,OAC1BiG,iBAAkBV,EAAMqB,KAAKf,OAC7BgB,OAAQtB,EAAMqB,KAAKC,UAIM,CAACT,mBAAgBC,cAAW3F,iBAAckC,cAAWC,kBAC9EiE,IAFWH,CAGTf","file":"static/js/3.5c09a8e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2dd7v\",\"mainPhoto\":\"ProfileInfo_mainPhoto__23KwJ\",\"contact\":\"ProfileInfo_contact__1Cak6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__1faEo\",\"posts\":\"MyPosts_posts__3cMK3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3-puP\"};","import React, {useEffect, useState} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n       let [editMode, setEditMode]=  useState(false);\r\n       let [status, setStatus]=  useState(props.status);\r\n\r\n       useEffect(() => {\r\n           setStatus(props.status)\r\n       }, [props.status]);\r\n\r\n       const activateEditMode = () =>{\r\n           setEditMode(true)\r\n       }\r\n\r\n    const deactivateEditMode  = () =>{\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n   const onStatusChange = (e) => {\r\n       setStatus(e.currentTarget.value);\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                { !editMode &&\r\n                    <div>\r\n                       <b>Status</b>: <span onDoubleClick= {activateEditMode }> {props.status || '----'}</span>\r\n                    </div>\r\n                }\r\n                { editMode &&\r\n                    <div>\r\n                        <input onChange={onStatusChange} autoFocus={true}\r\n                               onBlur={deactivateEditMode}\r\n                               value = {status}/>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) =>{\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>Looking for a job</b>:{createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return  <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile'})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/icons-user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode]=  useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) =>{\r\n        saveProfile(formData).then(\r\n            () =>{\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() =>{setEditMode(true)}} profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) =>{\r\n   return <div>\r\n       {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return  <Contact key={key} contactTitle={key} contactValue={profile.contacts[key] }/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) =>{\r\n        return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n\n    return (\n        <div className={s.item}>\n            <img\n                src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQC5A7OMJkpx_aj1ZnN_rNKPIR9AYf99F8PoA&usqp=CAU'/>\n            {props.massage}\n            <div>like {props.likeCount}</div>\n        </div>\n\n    )\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nconst maxLength10  =  maxLengthCreator(10);\n\nlet AddNewPostForm = (props) =>  {\n    return(\n    <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field name= 'newPostText' component={Textarea}  placeholder={'Post message'}\n                   validate={[required, maxLength10]} />\n        </div>\n        <div>\n            <button>Add post</button>\n        </div>\n    </form>\n   )\n}\n\nlet AddNewPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\n\nconst MyPosts = React.memo(props => {\n    let postElements =\n        [...props.posts]\n            .reverse()\n            .map(p => <Post key={p.id} massage={p.massage} likesCount={p.likesCount}/>);\n\n\n    let newPostElement = React.createRef();\n\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);  //функция с мир а бизнеса\n    }\n\n    return (\n        <div className={s.postBlock}>\n            <h3>My Post</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postElements}\n            </div>\n        </div>\n\n    );\n});\n\nexport default MyPosts;","import React from 'react';\nimport {addPostActionCreator} from \"../../../redax/profile_reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\n\nconst mapStateToProps = (state) =>{\n        return{\n            posts: state.profilePage.posts,\n            newPostText: state.profilePage.newPostText\n        }\n}\nconst mapDispatchToProps = (dispatch) =>{\n        return{\n            addPost: (newPostText) =>{\n                dispatch(addPostActionCreator(newPostText));\n            }\n        }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPost/MyPostsContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div>\n             <ProfileInfo savePhoto={props.savePhoto}\n                          isOwner={props.isOwner}\n                          profile = {props.profile}\n                          status={props.status}\n                          saveProfile={props.saveProfile}\n                          updateStatus={props.updateStatus}/>\n             <MyPostsContainer />\n        </div>\n    );\n};\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redax/profile_reducer\";\n\nimport {compose} from \"redux\";\nimport {withRouter} from \"react-router-dom\";\n\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n        componentDidUpdate(prevProps, prevState, snapshot) {\n            if (this.props.match.params.userId != prevProps.match.params.userId) {\n                this.refreshProfile();\n            }\n        }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                    isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n    )(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}